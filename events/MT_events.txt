#########################################
#
# MT events by Metallichydra
#
#########################################

namespace = MT_events

#########################################

# AAA.22
# random archeology site from archeology finisher
#country_event = {
#	id = MT_events.4
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		has_tradition = tr_mt_archeology_finish
#	}
#
#	immediate = {
#		random_planet_within_border = {
#			limit = {
#				habitable_planet = no
#				is_artificial = no
#				NOR = {
#					is_planet_class = pc_ringworld_habitable_damaged
#					is_planet_class = pc_ringworld_tech_damaged
#					is_planet_class = pc_ringworld_tech
#					is_planet_class = pc_ringworld_seam
#					is_planet_class = pc_ringworld_seam_damaged
#					exists = archaeological_site
#					has_planet_flag = suppress_archaeological_sites
#					solar_system = {
#						has_star_flag = suppress_archaeological_sites
#					}
#				}
#			}
#			save_event_target_as = chosen_planet
#			event_target:chosen_planet = { 
#				prevent_anomaly = yes
#				create_archaeological_site = random
#			}
#		}
#	}
#}

# AAA.28
# archeology tradition arcsite finish extra reward
#fleet_event = {
#	id = MT_events.5
#	hide_window = yes
#	is_triggered_only = yes
#
#	trigger = {
#		owner = {
#			has_tradition = tr_mt_archeology_respect_the_dead
#		}
#	}
#
#	immediate = {
#		owner = {
#			add_monthly_resource_mult = {
#				resource = unity
#				value = 8 #12
#				min = 150
#				max = 100000
#			}
#		}
#	}
#}

# AAA.31
# Artifact Offers Random List
#country_event = {
#	id = MT_events.6
#	hide_window = yes
#	is_triggered_only = yes
#	
#	trigger = {
#		owner = {
#			has_tradition = tr_mt_archeology_private_collector_appropriation
#			OR = {
#				NOT = { has_ethic = ethic_gestalt_consciousness }
#			}
#		}
#	}
#
#	immediate = {
#		# Random List
#		random_list = {
#			75 = { country_event = { id = MT_events.1 } } # Small offer
#			50 = { country_event = { id = MT_events.2 } } # Medium Offer
#			25 = { country_event = { id = MT_events.3 } } # Large Offer
#		}
#	}
#}

# AAA.34
### Desecration finished
#planet_event = {
#	id = MT_events.7
#	title = MT_events.7.name
#	desc = MT_events.7.desc
#	picture = GFX_evt_big_landing_ship
#	show_sound = event_default
#	location = FROM
#	trackable = yes
#
#	is_triggered_only = yes
#
#	immediate = {
#		add_modifier = { modifier = "MT_desecrated_planet" days = -1 }
#		if = {
#			limit = {
#				is_planet_class = pc_nuked
#			}
#			while = {
#				count = trigger:planet_size
#				random_list = {
#					1 = {
#						add_deposit = d_city_ruins
#					}
#					1 = {
#						add_deposit = d_ruined_district
#					}
#					8 = {}
#				}
#			}
#		}
#		if = {
#			limit = {
#				is_planet_class = pc_relic
#			}
#			while = {
#				count = trigger:planet_size
#				random_list = {
#					2 = {
#						add_deposit = d_ruined_arcology
#					}
#					1 = {
#						add_deposit = d_city_ruins
#					}
#					6 = {}
#				}
#			}
#		}
#	}
#
#	option = {
#		name = MT_events.7.a
#		owner = {
#			medium_artifact_reward = yes
#			#add_resource = { minor_artifacts = 100 }	
#		}
#	}
#}

# AAA.35
### Desecration Gatekeeper
#planet_event = {
#	id = MT_events.8
#	hide_window = yes
#
#	is_triggered_only = yes
#	
#	trigger = {
#		exists = owner
#		OR = {
#			is_planet_class = pc_nuked
#			is_planet_class = pc_relic
#		}
#	}
#
#	immediate = {
#		random_list = {
#
#			# Minor artifacts found
#			20 = {
#				planet_event = { id = MT_events.9 }
#			}
#			# Digsite Found
#			2 = {
#				planet_event = { id = MT_events.10 }
#				modifier = {
#					factor = 0
#					NOT = { is_planet_class = pc_nuked }
#					OR = {
#						exists = archaeological_site
#						has_planet_flag = suppress_archaeological_sites
#						solar_system = {
#							has_star_flag = suppress_archaeological_sites
#						}
#					}
#				}
#			}
#			# Peculiar Technology Found
#			8 = {
#				planet_event = { id = MT_events.11 }
#			}
#			# Nothing
#			70 = {
#				modifier = {
#					factor = 0.5
#					is_planet_class = pc_relic
#				}
#			}
#		}
#	}
#}

# AAA.36
### Minor Artifacts Found
#planet_event = {
#	id = MT_events.9
#	title = MT_events.9.name
#	desc = MT_events.9.desc
#	picture = GFX_evt_big_landing_ship
#	show_sound = event_default
#	location = FROM
#	trackable = yes
#
#	is_triggered_only = yes
#
#	option = {
#		name = MT_events.9.a
#		owner = {
#			small_artifact_reward = yes
#			# add_resource = { minor_artifacts = 50 }	
#		}
#	}
#}

# AAA.37
### Digsite Found
#planet_event = {
#	id = MT_events.10
#	title = MT_events.10.name
#	desc = MT_events.10.desc
#	picture = GFX_evt_big_landing_ship
#	show_sound = event_default
#	location = FROM
#	trackable = yes
#
#	is_triggered_only = yes
#
#	# Create archeological site
#	option = {
#		name = MT_events.10.a
#		create_archaeological_site = random # Make specific arcsites
#	}
#	# Can't waste time
#	option = {
#		name = MT_events.10.b
#	}
#}

# AAA.38
### Technology Found
#planet_event = {
#	id = MT_events.11
#	title = MT_events.11.name
#	desc = MT_events.11.desc
#	picture = GFX_evt_big_landing_ship
#	show_sound = event_default
#	location = FROM
#	trackable = yes
#
#	is_triggered_only = yes
#
#	# Get Technology
#	option = {
#		name = MT_events.11.a
#		owner = {
#			add_random_research_option = {
#				add_progress = 0.8
#				ignore_prereqs = no
#				ignore_rare = yes
#			}
#		}
#	}
#}

# AAA.40
### Unity from destroying fallen empire ships
# on_debris_scavenged: Fired when a science ship succesfully analyzed or scavenged debris
# this = country
# from = debris
# fromfrom = controller of destroyed ship
#country_event = {
#	id = MT_events.12
#	is_triggered_only = yes
#	hide_window = yes
#
#	trigger = {
#		has_tradition = tr_mt_history_grave_robbers
#	}
#
#	immediate = {
#		while = {
#			count = value:ships_of_size_in_fromscoped_debris|SIZE|small_ship_fallen_empire|
#			random = {
#				chance = 20
#				add_resource = { minor_artifacts = 10 }
#			}
#		}
#		while = {
#			count = value:ships_of_size_in_fromscoped_debris|SIZE|large_ship_fallen_empire|
#			random = {
#				chance = 50
#				add_resource = { minor_artifacts = 10 }
#			}
#		}
#		while = {
#			count = value:ships_of_size_in_fromscoped_debris|SIZE|massive_ship_fallen_empire|
#			add_resource = { minor_artifacts = 10 }
#		}
#	}
#}

fleet_event = {
	# on_crossing_border
	# Scope = Fleet
	# From = Origin System
	# FromFrom = Destination System
	id = MT_events.13
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			exists = space_owner
			space_owner = {
				is_country_type = default
				has_tradition = tr_mt_movement_constant_tracking
			}
		}
		from = {
			OR = {
				NOT = { exists = space_owner }
				AND = {
					exists = space_owner
					space_owner = { NOT = { is_same_value = root.fromfrom.space_owner } }
					# technically redundant
				}
			}
		}
	}

	immediate = {
		# Return message
		if = {
			limit = {
				fromfrom.space_owner = {
					has_communications = root.owner
				}
			}
			root.owner = {
				save_event_target_as = mt_offending_country
			}
			fromfrom.space_owner = {
				add_intel = { amount = 10 who = event_target:mt_offending_country }
			}
		}
	}
}

country_event = {
	id = MT_events.14
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_agenda_selected = agenda_MT_ambitious_promises
			has_agenda_selected = agenda_MT_insurgency_shadow_strike
		}
	}

	immediate = {
		add_council_agenda_progress_percent = 1
	}
}

planet_event = {
	id = MT_events.15
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_urban_finish
		}
	}

	immediate = {
		add_modifier = { modifier = MT_urban_finish_modifier days = -1 }
		from = {
			remove_modifier = MT_urban_finish_modifier
		}
	}
}

### Unity from scavenging debris
# on_debris_scavenged: Fired when a science ship succesfully analyzed or scavenged debris
# this = country
# from = debris
# fromfrom = controller of destroyed ship
country_event = {
	id = MT_events.16
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_tradition = tr_mt_piracy_adopt
	}

	immediate = {
		add_monthly_resource_mult = {
			resource = unity
			value = 1 #12
			min = 150
			max = 100000
		}
	}
}

# On winning a ground battle.
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# country_event = {
# 	id = MT_events.17
# 	hide_window = yes
# 	is_triggered_only = yes

# 	trigger = {
# 		always = no
# 		#has_tradition = tr_mt_envy_expanded_workforce
# 	}

# 	immediate = {
# 		while = {
# 			count = value:MT_perc_of_planet_pop
# 			random_owned_pop = { # Pick a pop
# 				limit = {
# 					planet = { is_same_value = ROOT.FROMFROM }
# 				}
# 				save_event_target_as = kidnapped_pop
# 			}
# 			ROOT = { # Pick a planet
# 				reroll_random = yes
# 				random_owned_planet = {
# 					save_event_target_as = target_planet
# 				}
# 			}
# 			resettle_pop = { # Kidnap pop
# 				pop = event_target:kidnapped_pop
# 				planet = event_target:target_planet
# 			}
# 			event_target:kidnapped_pop = {
# 				set_citizenship_type = {
# 					country = ROOT
# 					type = citizenship_slavery
# 				}
# 			}
# 		}
# 	}
# }

# Fanatic Purifiers Envy Final Gift
planet_event = {
	id = MT_events.18
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		always = no
		#FROM = {
		#	has_active_tradition = tr_mt_envy_expanded_workforce_purifiers
		#}
		#exists = fromfrom #crisis.202 can remove the last pop
		#FROMFROM = {
		#	is_robot_pop = no
		#	NOT = {
		#		is_same_species = owner_species
		#	}
		#}
		#is_controlled_by = FROM
	}

	immediate = {
		FROM = {
			add_monthly_resource_mult = {
				resource = unity
				value = 1.5
				min = 5
				max = 100
			}
		}
	}
}

country_event = { # Envy Material Liberator / FROM = Leader
	id = MT_events.19
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = spawning_renowned_leader }
		exists = owner
		has_tradition = tr_mt_piracy_privateers
		is_country_type = default
		FROM = {
			leader_class = commander
		}
	}

	immediate = {
		FROM = {
			if = {
				limit = {
					leader_class = commander
				}
				add_trait_no_notify = leader_trait_corsair
			}
		}
	}
}

# award XP to all leaders if country has the antiquity knowledge of a legacy tradition
country_event = {
	id = MT_events.20
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_tradition = tr_mt_antiquity_1
			}
			every_owned_leader = {
				add_experience = 1000
			}
			create_message = {
				type = TRADITION_EFFECT
				localization =  message_tradition_effect_MT_history_lessons_effect_desc
				days = @toast_message_days
				custom_toast_content_text = tr_mt_antiquity_1_toast_text
				custom_toast_content_icon = GFX_topbar_leaders_button
			}
		}
	}
}

# On winning a ground battle.
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# country_event = {
# 	id = MT_events.21
# 	hide_window = yes
# 	is_triggered_only = yes

# 	trigger = {
# 		has_tradition = tr_mt_annihilation_malevolence
# 		is_homicidal = no
# 	}

# 	immediate = {
# 		while = {
# 			count = value:MT_perc_of_planet_pop
# 			random_owned_pop = { # Pick a pop
# 				limit = {
# 					planet = { is_same_value = ROOT.FROMFROM }
# 				}
# 				kill_pop = yes
				
# 			}
# 		}
# 	}
# }

country_event = {
	id = MT_events.23
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_annihilation_final_strike
	}

	immediate = {
		from = {
			country_event = { id = MT_events.24 }
		}
	}
}

# Execute leader upon defeat
# A war has been lost
# This = Loser Warleader
# From = Winner Warleader
country_event = {
	id = MT_events.24
	title = MT_events.24.name
	desc = {
		trigger = { NOT = { has_country_flag = MT_annihilation_malevolence_triggered@from } }
		text = MT_events.24.desc
	}
	desc = {
		trigger = {
			has_country_flag = MT_annihilation_malevolence_triggered@from
		}
		text = MT_events.24.desc.again
	}
	picture = GFX_evt_surrender
	show_sound = event_planetary_riot
	location = root

	is_triggered_only = yes

	trigger = {
		NOT = { has_ethic = ethic_gestalt_consciousness }
		exists = ruler
	}

	immediate = {
		ruler = {
			save_event_target_as = rulername
			kill_leader = {
				ruler = yes
				show_notification = no
			}
		}
	}

	option = {
		name = MT_events.24.a
		custom_tooltip = MT_events.24.a.tooltip
		hidden_effect = {
			set_country_flag = MT_annihilation_malevolence_triggered@from
		}
	}
}

# on_pop_purged
# This = Planet scope
# From = Country
# FromFrom = Pop
# Tradition: Beauty of annihilation necromancers NOTE: this is a partial copy of necroids_events.25
planet_event = {
	id = MT_events.25
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			has_active_tradition = tr_mt_annihilation_beauty_of_annihilation_necromancers
		}
		exists = fromfrom #crisis.202 can remove the last pop
		fromfrom = {
			NOR = {
				has_purge_type = {
					type = purge_displacement
					}
				has_purge_type = {
					type = purge_cosmogenesis
					}
				has_purge_type = {
					type = purge_cosmogenesis_lathe_resettle
				}
			}
			is_robotic_species = no
			species = {
				NAND = {
					is_archetype = PRESAPIENT
					has_trait = trait_zombie
				}
			}

		}
	}

	immediate = {
		random_list = {
			80 = {	}
			# 20% Chance to create a zombie
			20 = {
				create_pop_group = {
					species = fromfrom.species
					size = local_pop_amount
					effect = {
						save_event_target_as = last_created_pop_group
					}
				}
				event_target:last_created_pop_group = {
					modify_species = {
						species = this
						add_trait = trait_zombie
						add_traits_at_start_of_list = yes
						remove_trait = trait_self_modified
						remove_trait = trait_latent_psionic
						remove_trait = trait_psionic
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
		}
	}
}

# This = Planet where the pop was bombed to death
# From = Country which is raining down fire and brimstone
# Tradition = malevolence something or another
planet_event = {
	id = MT_events.26
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = {
			has_designation = col_cosmogenesis_world
		}
		from = {
			exists = this
			has_tradition = tr_mt_annihilation_beauty_of_annihilation
			NOR = { has_active_tradition = tr_mt_annihilation_beauty_of_annihilation_necromancers }
		}
		owner = {
			exists = this
			# is_country_type = default
		}
	}

	immediate = {
		while = {
			count = value:per_100_local_pop_amount
			from = {
				add_monthly_resource_mult = {
					resource = unity
					value = 1
					min = 10
					max = 1000000
				}
			}
		}
	}
}

#country_event = { # Mysticism Mystic Messengers / FROM = Leader
#	id = MT_events.27
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		NOT = { has_country_flag = spawning_renowned_leader }
#		exists = owner
#		has_tradition = tr_mt_mysticism_messenger
#		#is_country_type = default
#		#FROM = {
#		#	leader_class = scientist
#		#}
#	}
#
#	immediate = {
#		FROM = {
#			random_list = {
#				20 = { add_trait_no_notify = mt_mystic_leader }
#				80 = { }
#			}
#		}
#	}
#}

#country_event = { # FROM = Leader
#	id = MT_events.28
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		FROM = {
#			has_trait = mt_mystic_leader
#			has_skill = 10
#		}
#	}
#
#	immediate = {
#		FROM = {
#			kill_leader = yes
#		}
#		change_variable = {
#			which = mt_mystics_ascended
#			value = 1
#		}
#	}
#}

fleet_event = {
	id = MT_events.29
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_mysticism_synthesis
		}
	}

	immediate = {
		add_modifier = {
			modifier = mt_surprise_attack_modifier
			days = 180
		}
	}
}

# On own ship destroyed
country_event = {
	id = MT_events.30
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_tradition = tr_mt_swarm_always_more
	}
	
	immediate = {
		FROMFROM = { # Destroyed Ship
			if = {
				limit = { exists = fleet }
				fleet = {
					random_owned_ship = {
						repair_percentage = 10
					}
				}
			}
		}
	}
}

# On destroying enemy ship.
country_event = {
	id = MT_events.31
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_swarm_feast
	}

	immediate = {
		FROMFROM = { # Winning ship.
			add_modifier = {
				modifier = mt_feast_modifier
				days = 90
			}
		}
	}
}

# On Detection
#country_event = {
#	id = MT_events.32
#	title = MT_events.32.name
#	desc = MT_events.32.desc
#	is_triggered_only = yes
#
#	#trigger = {
#	#	has_tradition = tr_mt_swarm_feast
#	#}
#
#	immediate = {
#		add_modifier = {
#			modifier = spurred_by_the_past
#			years = 10
#			}
#		}
#	}
#}

# Uncloaking fleet 
fleet_event = {
	id = MT_events.32
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_first_contact_dlc = yes
		owner = { has_tradition = tr_mt_swarm_ambush }
		exists = solar_system
	}

	immediate = {
		owner = { save_event_target_as = mt_swarm_owner }
		solar_system = {
			every_fleet_in_system = {
				limit = {
					owner = {
						is_at_war_with = mt_swarm_owner
					}
				}
				add_modifier = {
					modifier = mt_ambush_modifier
					days = 180
				}
			}
		}
	}
}

# Purifiers Final Strike
# Event for destroyed country
country_event = {
	id = MT_events.33
	hide_window = yes
	is_triggered_only = yes

	# This = destroyed country
	# From = optional, destroyer (country)

	trigger = {
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
		exists = from
		from = { has_active_tradition = tr_mt_annihilation_final_strike_purifiers }
	}

	immediate = {
		from = {
			add_monthly_resource_mult = {
				resource = unity
				value = 60
				min = 1
			}
		}
	}
}

# Purifiers Relic Theft
# Event for destroyed country
#country_event = {
#	id = MT_events.34
#	hide_window = yes
#	is_triggered_only = yes
#
#	# This = destroyed country
#	# From = optional, destroyer (country)
#
#	trigger = {
#		OR = {
#			is_country_type = fallen_empire
#			is_country_type = awakened_fallen_empire
#		}
#		exists = from
#		from = { has_active_tradition = tr_mt_history_repurposed_relics_purifiers }
#	}
#
#	immediate = {
#		from = {
#			add_monthly_resource_mult = {
#				resource = unity
#				value = 120
#				min = 1
#			}
#		}
#	}
#}

# Black Hole Boost - fleet entered system
fleet_event = {
	id = MT_events.35
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_chaos_event_horizon
		}
	}

	immediate = {
		MT_event_horizon_check = yes
	}
}

# Black Hole Boost - ship created
ship_event = {
	id = MT_events.36
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_chaos_event_horizon
		}
	}

	immediate = {
		fleet = {
			remove_modifier = mt_event_horizon_modifier # to re-assign modifier to take new ship into account
			MT_event_horizon_check = yes
		}
	}
}

# Insurgency Overlord Destroyed
# Event for destroyed country
country_event = {
	id = MT_events.37
	hide_window = yes
	is_triggered_only = yes

	# This = destroyed country
	# From = optional, destroyer (country)

	trigger = {
		has_country_flag = MT_insurgent_overlord
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
	}

	immediate = {
		save_event_target_as = mt_dead_overlord
		every_country = {
			limit = {
				has_tradition = tr_mt_insurgency_adopt
				event_target:mt_dead_overlord = {
					has_country_flag = MT_overlord@prev
				}
			}
			set_country_flag = mt_insurgent_victory
		}
	}
}

# Loyalty: Overlord researches Technology (Scholarium)
country_event = {
	id = MT_events.38
	hide_window = yes
	is_triggered_only = yes

	# This = destroyed country
	# From = optional, destroyer (country)

	trigger = {
		is_overlord = yes
		any_subject = {
			has_active_tradition = tr_mt_loyalty_speciality_scholarium
		}
	}

	immediate = {
		every_subject = {
			limit = {
				has_active_tradition = tr_mt_loyalty_speciality_scholarium
			}
			add_monthly_resource_mult = {
				resource = unity
				value = 1
				min = 150
				max = 100000
			}
		}
	}
}

# On destroying enemy ship.
country_event = {
	id = MT_events.39
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_active_tradition = tr_mt_loyalty_speciality_bulwark
		FROM = {
			has_rival = Prev.Overlord
		}
	}

	immediate = {
		add_monthly_resource_mult = {
			resource = unity
			value = 0.1 #12
			min = 15
			max = 100000
		}
	}
}

leader_event = {
	id = MT_events.40
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		owner = {
			is_overlord = yes
			any_subject = {
				has_active_tradition = tr_mt_loyalty_representitives
			}
		}
	}
	
	immediate = {
		species = {
			save_event_target_as = MT_leader_species
		}
		owner = {
			every_subject = {
				limit = {
					has_active_tradition = tr_mt_loyalty_representitives
					species = {
						is_same_species_class = event_target:MT_leader_species
					}
				}
				add_monthly_resource_mult = {
					resource = unity
					value = 24
					min = 150
					max = 100000
				}
			}
		}
	}
}

country_event = {
	id = MT_events.41
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		from = {
			has_tradition = tr_mt_chaos_horrific_visions
		}
		fromfrom = {
			exists = leader
		}
	}
	
	immediate = {
		fromfrom = {
			leader = {
				if = {
					limit = {
						NOT = { has_trait = leader_trait_MT_traumatized }
					}
					# add trait
					add_trait = leader_trait_MT_traumatized
				}
			}
		}
	}
}

# On own ship destroyed
country_event = {
	id = MT_events.42
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_tradition = tr_mt_chaos_last_gift
	}
	
	immediate = {
		FROMFROMFROM = { # Ship that destroyed our ship
			if = {
				limit = {
					NOT = { has_modifier = MT_chaotic_scar }
				}
				add_modifier = {
					modifier = MT_chaotic_scar
					days = -1
				}
			}
		}
	}
}

country_event = {
	id = MT_events.43
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_valor_charge
	}

	immediate = {
		FROMFROM = {
			add_modifier = {
				modifier = MT_valor_charge_modifier
				days = 30
			}
		}
	}
}

# Heroic Symbols Apply Flags
country_event = {
	id = MT_events.44
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_valor_heroic_symbols
	}

	immediate = {
		FROMFROM = {
			set_timed_fleet_flag = {
				flag = MT_valor_fast_battle
				days = 30
			}
		}
		if = {
			limit = {
				FROMFROM = {
					has_fleet_flag = MT_valor_recently_catapulted
				}
			}
			FROMFROM = {
				set_fleet_flag = MT_valor_recently_catapulted_into_fight
			}
		}
		#if = {
		#	limit = {
		#		FROMFROM.value:MT_valor_force_disparity < 0.5
		#	}
		#	set_fleet_flag = MT_valor_overwhelming_odds
		#}
	}
}

# Valor Uncloaking fleet 
fleet_event = {
	id = MT_events.45
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_first_contact_dlc = yes
		owner = { has_tradition = tr_mt_valor_heroic_symbols }
	}

	immediate = {
		set_timed_fleet_flag = {
			flag = MT_valor_recently_uncloaked
			days = 180
		}
	}
}

# Heroic Symbols Apply Traits
country_event = {
	id = MT_events.46
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_valor_heroic_symbols
		FROMFROM = {
			exists = leader
		}
		leader = {
			NOT = {
				has_leader_flag = MT_obtained_valor_trait
			}
		}
	}

	immediate = {
		FROMFROM = {
			if = {
				limit = {
					solar_system = {
						is_same_value = root.capital_scope
					}
				}
				set_fleet_flag = MT_valor_capital_defender
			}
			if = {
				limit = {
					solar_system = {
						is_same_value = root.from.capital_scope
					}
				}
				set_fleet_flag = MT_valor_capital_invader
			}
		}
		FROMFROM = {
			switch = {
				trigger = has_fleet_flag
				MT_valor_overwhelming_odds = {
					leader = {
						add_trait = leader_trait_MT_valor_lucky
						set_leader_flag = MT_obtained_valor_trait
					}
				}
				MT_valor_recently_uncloaked = {
					leader = {
						add_trait = leader_trait_MT_valor_ambusher
						set_leader_flag = MT_obtained_valor_trait
					}
				}
				MT_valor_fast_battle = {
					leader = {
						add_trait = leader_trait_MT_valor_quick_victory
						set_leader_flag = MT_obtained_valor_trait
					}
				}
				MT_valor_capital_defender = {
					leader = {
						add_trait = leader_trait_MT_valor_capital_defender
						set_leader_flag = MT_obtained_valor_trait
					}
				}
				MT_valor_capital_invader = {
					leader = {
						add_trait = leader_trait_MT_valor_capital_invader
						set_leader_flag = MT_obtained_valor_trait
					}
				}
				MT_valor_recently_catapulted_into_fight = {
					leader = {
						add_trait = leader_trait_MT_valor_slingshot
						set_leader_flag = MT_obtained_valor_trait
					}
				}
				default = {
					leader = {
						add_trait = leader_trait_MT_valor_hero
						set_leader_flag = MT_obtained_valor_trait
					}
				}
			}
		}
	}
}

# Heroic Symbols remove flags
country_event = {
	id = MT_events.47
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_valor_heroic_symbols
	}

	immediate = {
		FROMFROM = {
			remove_fleet_flag = MT_valor_recently_uncloaked
			remove_fleet_flag = MT_valor_overwhelming_odds
			remove_fleet_flag = MT_valor_fast_battle
			remove_fleet_flag = MT_valor_recently_catapulted_into_fight
		}
	}
}

# Heroism
country_event = {
	id = MT_events.48
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_valor_heroism
		FROMFROM = {
			exists = leader
		}
	}

	immediate = {
		FROMFROM = {
			leader = {
				add_experience = 200
			}
		}
	}
}

# Valor Catapult fleet 
fleet_event = {
	id = MT_events.49
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = { has_tradition = tr_mt_valor_heroic_symbols }
	}

	immediate = {
		set_timed_fleet_flag = {
			flag = MT_valor_recently_catapulted
			days = 30
		}
	}
}

# Valor ambusher effect
fleet_event = {
	id = MT_events.50
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = leader
		leader = {
			has_trait = leader_trait_MT_valor_ambusher
		}
	}

	immediate = {
		add_modifier = {
			modifier = mt_valor_surprise_attack_modifier
			days = 60
		}
	}
}

country_event = {
	id = MT_events.51
	title = MT_events.51.name
	desc = MT_events.51.desc
	picture = GFX_evt_alien_propaganda

	is_triggered_only = yes

	option = {
		name = MT_events.51.egalitarian
		add_modifier = {
			modifier = mt_manipulation_egalitarian
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.authoritarian
		add_modifier = {
			modifier = mt_manipulation_authoritarian
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.materialist
		add_modifier = {
			modifier = mt_manipulation_materialist
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.spiritualist
		add_modifier = {
			modifier = mt_manipulation_spiritualist
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.xenophile
		add_modifier = {
			modifier = mt_manipulation_xenophile
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.xenophobe
		add_modifier = {
			modifier = mt_manipulation_xenophobe
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.pacifist
		add_modifier = {
			modifier = mt_manipulation_pacifist
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
	
	option = {
		name = MT_events.51.militarist
		add_modifier = {
			modifier = mt_manipulation_militarist
			days = 1
			time_multiplier = value:mt_manipulation_agenda_duration
		}
	}
}

# Diligence
# On own ship destroyed
country_event = {
	id = MT_events.52
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_tradition = tr_mt_diligence_never_surrender
	}
	
	immediate = {
		FROMFROM = { # Destroyed Ship
			if = {
				limit = { exists = fleet }
				fleet = {
					random_owned_ship = {
						add_modifier = {
							modifier = mt_diligence_never_surrender_modifier
							days = 30
						}
					}
				}
			}
		}
	}
}

# Manipulation Planted Evidence
espionage_operation_event = {
	id = MT_events.53
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		owner = {
			has_tradition = tr_mt_manipulation_planted_evidence
		}
	}
	
	immediate = {
		spynetwork = {
			random = {
				chance = 20
				if = {
					limit = { target = { has_authority = auth_hive_mind } }
					espionage_create_asset_hive = yes
				}
				else_if = {
					limit = { target = { has_authority = auth_machine_intelligence } }
					espionage_create_asset_machine = yes
				}
				else = {
					espionage_create_asset_regular = yes
				}
			}
		}
	}
}

# Scope = Astral Rift
event = {
	id = MT_events.54
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		solar_system = {
			exists = owner
			owner = {
				has_tradition = tr_mt_curiosity_call_of_the_unknown
			}
		}
	}

	immediate = {
		solar_system.owner = {
			add_monthly_resource_mult = {
				resource = physics_research
				value = 12
				min = 150
				max = 1000000
			}
		}
	}
}

country_event = {
	id = MT_events.55
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_curiosity_gravity
	}

	immediate = {
		add_monthly_resource_mult = {
			resource = unity
			value = 18
			min = 10
			max = 1000000
		}
	}
}

planet_event = { # Broodmother Machine
	id = MT_events.56
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		fromfrom = { 
			is_robot_pop = yes
			NOT = { has_trait = trait_MT_special_care }
		}
		owner = { has_active_tradition = tr_mt_royalty_broodmother_machine }
		is_homeworld = yes
	}

	immediate = {
		fromfrom = {
			modify_species = {
				species = this
				add_trait = trait_MT_special_care
				add_traits_at_start_of_list = yes
			}
		}
	}
}

planet_event = { # Broodmother Machine Remove trait if wrong planet
	id = MT_events.57
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		fromfrom = { 
			is_robot_pop = yes
			has_trait = trait_MT_special_care
		}
		OR = {
			owner = { NOT = { has_active_tradition = tr_mt_royalty_broodmother_machine } }
			is_homeworld = no
		}
	}

	immediate = {
		fromfrom = {
			modify_species = {
				species = this
				remove_trait = trait_MT_special_care
			}
		}
	}
}

country_event = {
	id = MT_events.58
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_royalty_grand_entrance
	}

	immediate = {
		if = {
			limit = { has_modifier = MT_grand_entrance_modifier }
			remove_modifier = MT_grand_entrance_modifier
		}
		add_modifier = {
			modifier = MT_grand_entrance_modifier
			days = 1800
		}
	}
}

# On system gained.
country_event = {
	id = MT_events.59
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_tradition = tr_mt_isolation_thorns
			}
			FROM = {
				if = {
					limit = { exists = starbase }
					starbase = { add_MT_thorns = yes }
				}
			}
		}
	}
}

# On system lost.
country_event = {
	id = MT_events.60
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { # checks if a new owner exists
			limit = { exists = FROMFROM }
			if = {
				limit = {
					has_tradition = tr_mt_isolation_thorns
					FROMFROM = {
						NOT = {
							has_tradition = tr_mt_isolation_thorns
						}
					}
				}
				FROM = {
					if = {
						limit = { exists = starbase }
						starbase = { remove_MT_thorns = yes }
					}
				}
			}
		}
		else = { # if no new owner, always remove the thorns field (just a failsafe, systems with no onwer shouldn't have a starbase)
			FROM = {
				if = {
					limit = { exists = starbase }
					starbase = {
						remove_MT_thorns = yes
					}
				}
			}
		}
	}
}

# On pop grown | Evolution Adoption Effect
#planet_event = {
#	id = MT_events.61
#	hide_window = yes
#	is_triggered_only = yes
#	
#	trigger = {
#		From = {
#			has_tradition = tr_mt_evolution_adopt
#			has_policy_flag = mt_adapt
#		}
#	}
#	
#	immediate = {
#		FromFrom = {
#			modify_species = {
#				ideal_planet_class = root
#			}
#		}
#	}
#}

# On pop grown | Evolution Finisher Effect
#planet_event = {
#	id = MT_events.62
#	hide_window = yes
#	is_triggered_only = yes
#	
#	trigger = {
#		always = no
#		#From = {
#		#	has_tradition = tr_mt_evolution_finish
#		#	has_policy_flag = mt_evolve
#		#}
#		#FromFrom = {
#		#	is_robotic_species = no
#		#}
#	}
#	
#	immediate = {
#		FromFrom = {
#			random = {
#				chance = 10
#				modify_species = {
#					add_trait = trait_MT_placeholder_trait
#				}
#				species = {
#					mutate_species = yes
#				}
#				modify_species = {
#					remove_trait = trait_MT_placeholder_trait
#				}
#			}
#		}
#	}
#}

# This = agreement
# owner = overlord
# target = subject
agreement_event = {
	id = MT_events.63
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_guidance_delegator
		}
	}

	immediate = {
		target = {
			add_modifier = {
				modifier = MT_delegator_subject_bonus
				days = -1
			}
		}
	}
}

agreement_event = {
	id = MT_events.64
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_guidance_delegator
		}
	}

	immediate = {
		target = { remove_modifier = MT_delegator_subject_bonus }
	}
}

fleet_event = {
	id = MT_events.65
	hide_window = yes
	is_triggered_only = yes

	# is_in_sensor_range_of_country if want to change to "whenever you see a fleet uncloak"
	trigger = {
		exists = solar_system
		solar_system = {
			exists = owner
			owner = {
				has_tradition = tr_mt_vigilance_cloak_tracking
			}
		}
	}

	immediate = {
		solar_system = {
			owner = {
				add_intel = {
					amount = 20
					who = root.owner
				}
			}
		}
	}
}

# On own ship destroyed
country_event = {
	id = MT_events.66
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_tradition = tr_mt_brightburn_supernova
	}
	
	immediate = {
		change_variable = {
			which = mt_supernova
			value = 1
		}
		country_event = { id = MT_events.67 days = 30 }
	}
}

country_event = {
	id = MT_events.67
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_tradition = tr_mt_brightburn_supernova
	}
	
	immediate = {
		change_variable = {
			which = mt_supernova
			value = -1
		}
	}
}

#Legion speed when cloaked
fleet_event = {
	id = MT_events.68
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_legion_stealth
		}
	}

	immediate = {
		add_modifier = {
			modifier = mt_legion_stealth_speed
			days = -1
		}
	}
}

fleet_event = {
	id = MT_events.69
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_legion_stealth
		}
	}

	immediate = {
		remove_modifier = mt_legion_stealth_speed
	}
}

# On destroying enemy ship.
country_event = {
	id = MT_events.70
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_legion_perfection
	}

	immediate = {
		FROMFROM = { # Winning ship.
			add_modifier = {
				modifier = mt_legion_perfection_modifier
				days = 30
			}
		}
	}
}

country_event = {
	id = MT_events.71
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_legion_rapid_response
	}

	immediate = {
		if = {
			limit = {
				has_country_flag = MT_legion_rapid_response_modifier
			}
			remove_country_flag = MT_legion_rapid_response_modifier
		}
		set_timed_country_flag = {
			flag = MT_legion_rapid_response_modifier
			days = 60
		}
	}
}

country_event = {
	id = MT_events.72
	title = MT_events.72.name
	desc = MT_events.72.desc
	picture = GFX_evt_burning_settlement

	is_triggered_only = yes

	immediate = {
		set_variable = {
			which = MT_vengeance_counter
			value = 0
		}
		every_rival_country = {
			root = {
				change_variable = {
					which = MT_vengeance_counter
					value = 1
				}
			}
			root = {
				if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 1 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_1
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 2 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_2
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 3 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_3
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 4 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_4
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 5 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_5
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 6 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_6
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 7 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_7
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 8 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_8
						set_country_flag = MT_potential_rival
					}
				}
				else_if = {
					limit = {
						check_variable = { which = MT_vengeance_counter value = 9 }
					}
					prev = {
						save_event_target_as = MT_potential_rival_9
						set_country_flag = MT_potential_rival
					}
				}
			}
		}
	}
	
	option = {
		name = MT_events.72.a
		#trigger = {
		#	exists = event_target:MT_potential_rival_1
		#}
		event_target:MT_potential_rival_1 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.b
		trigger = {
			exists = event_target:MT_potential_rival_2
		}
		event_target:MT_potential_rival_2 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.c
		trigger = {
			exists = event_target:MT_potential_rival_3
		}
		event_target:MT_potential_rival_3 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.d
		trigger = {
			exists = event_target:MT_potential_rival_4
		}
		event_target:MT_potential_rival_4 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.e
		trigger = {
			exists = event_target:MT_potential_rival_5
		}
		event_target:MT_potential_rival_5 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.f
		trigger = {
			exists = event_target:MT_potential_rival_6
		}
		event_target:MT_potential_rival_6 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.g
		trigger = {
			exists = event_target:MT_potential_rival_7
		}
		event_target:MT_potential_rival_7 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.h
		trigger = {
			exists = event_target:MT_potential_rival_8
		}
		event_target:MT_potential_rival_8 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	option = {
		name = MT_events.72.i
		trigger = {
			exists = event_target:MT_potential_rival_9
		}
		event_target:MT_potential_rival_9 = {
			set_country_flag = MT_true_nemesis@root
			set_country_flag = MT_vengeance_target
		}
	}
	
	after = {
		every_country = {
			limit = {
				has_country_flag = MT_potential_rival
			}
			remove_country_flag = MT_potential_rival
		}
		set_country_flag = MT_vengeance_chose_rival
	}
}

# Vengeance Glee
# On destroying enemy ship.
country_event = {
	id = MT_events.73
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_vengeance_glee
		FROM = {
			has_country_flag = MT_true_nemesis@root
		}
	}

	immediate = {
		add_monthly_resource_mult = {
			resource = unity
			value = 0.1 #12
			min = 15
			max = 100000
		}
	}
}

# Insurgency Overlord Destroyed
# Event for destroyed country
country_event = {
	id = MT_events.74
	hide_window = yes
	is_triggered_only = yes

	# This = destroyed country
	# From = optional, destroyer (country)

	trigger = {
		has_country_flag = MT_vengeance_target
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
	}

	immediate = {
		save_event_target_as = mt_dead_target
		every_country = {
			limit = {
				has_tradition = tr_mt_vengeance_adopt
				event_target:mt_dead_target = {
					has_country_flag = MT_true_nemesis@prev
				}
			}
			set_country_flag = mt_vengeance_victory
		}
	}
}

#country_event = { # Archeology Archeologist / FROM = Leader
#	id = MT_events.75
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		NOT = { has_country_flag = spawning_renowned_leader }
#		exists = owner
#		has_tradition = tr_mt_archeology_private_collector_appropriation
#		is_country_type = default
#		FROM = {
#			leader_class = scientist
#		}
#	}
#
#	immediate = {
#		FROM = {
#			if = {
#				limit = {
#					leader_class = scientist
#					NOR = {
#						has_trait = leader_trait_archaeologist
#						has_trait = leader_trait_archaeologist_2
#					}
#				}
#				add_trait_no_notify = leader_trait_archaeologist
#			}
#			else_if = {
#				limit = {
#					leader_class = scientist
#					has_trait = leader_trait_archaeologist
#					NOT = { has_trait = leader_trait_archaeologist_2 }
#				}
#				remove_trait = leader_trait_archaeologist
#				add_trait_no_notify = leader_trait_archaeologist_2
#			}
#			else = {
#				limit = {
#					leader_class = scientist
#					has_trait = leader_trait_archaeologist_2
#				}
#				add_trait_no_notify = "random_common"
#			}
#		}
#	}
#}

# THIS = ship
ship_event = {
	id = MT_events.76
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		exists = owner
		owner = { has_tradition = tr_mt_chaos_trip_through_hell }
		exists = fleet
		fleet = { NOT = { has_modifier = MT_chaotic_jump_trauma } }
	}
	
	immediate = {
		fleet = {
			add_modifier = {
				modifier = MT_chaotic_jump_trauma
				days = 30
			}
		}
	}
}

# Envy completed operation
espionage_operation_event = {
	id = MT_events.77
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		owner = {
			has_tradition = tr_mt_envy_debris_creators
		}
	}
	
	immediate = {
		owner = {
			if = {
				limit = {
					has_modifier = MT_envy_positive
				}
				remove_modifier = MT_envy_positive
			}
			add_modifier = {
				modifier = MT_envy_positive
				days = 1080
			}
		}
		FROM = {
			add_modifier = {
				modifier = MT_envy_negative
				days = 1080
			}
		}
	}
}

# Create background leader (Transfered)
#planet_event = {
#	id = MT_events.78
#	hide_window = yes
#	is_triggered_only = yes
#	
#	trigger = {
#		NOT = { has_planet_flag = MT_background_leader_created@from }
#		From = {
#			has_country_flag = MT_background_leader_tradition
#		}
#	}
#	
#	immediate = {
#		MT_create_background_leader = yes
#	}
#}

# Create background leader (Colonized)
#planet_event = {
#	id = MT_events.79
#	hide_window = yes
#	is_triggered_only = yes
#	
#	trigger = {
#		NOT = { has_planet_flag = MT_background_leader_created@owner }
#		Owner = {
#			has_country_flag = MT_background_leader_tradition
#		}
#	}
#	
#	immediate = {
#		MT_create_background_leader = yes
#	}
#}

# On winning a ground battle.
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
country_event = {
	id = MT_events.80
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_piracy_plunder
		NOT = {
			is_same_value = From
		}
	}
	# Change to gain resources based in districts
	immediate = {
		add_resource = {
			food = 100
			mult = value:farming_districts_value
		}
		add_resource = {
			minerals = 100
			mult = value:MT_mining_districts_value
		}
		add_resource = {
			energy = 100
			mult = value:MT_energy_districts_value
		}
	}
}

# Manipulation Planted Evidence
espionage_operation_event = {
	id = MT_events.81
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		owner = {
			has_tradition = tr_mt_disruption_adopt
		}
	}
	
	immediate = {
		FROM = {
			random_list = {
				1 = {
					add_modifier = {
						modifier = MT_disrupted_fleets
						days = 360
					}
				}
				1 = {
					add_modifier = {
						modifier = MT_disrupted_research
						days = 360
					}
				}
				1 = {
					modifier = {
						factor = 0
						is_gestalt = yes
					}
					add_modifier = {
						modifier = MT_disrupted_economy
						days = 360
					}
				}
			}
		}
	}
}

# On system gained.
country_event = {
	id = MT_events.82
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_tradition = tr_mt_disruption_malware
			}
			FROM = {
				if = {
					limit = { exists = starbase }
					starbase = { add_MT_disruption_aura = yes }
				}
			}
		}
	}
}

# On system lost.
country_event = {
	id = MT_events.83
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { # checks if a new owner exists
			limit = { exists = FROMFROM }
			if = {
				limit = {
					has_tradition = tr_mt_disruption_malware
					FROMFROM = {
						NOT = {
							has_tradition = tr_mt_disruption_malware
						}
					}
				}
				FROM = {
					if = {
						limit = { exists = starbase }
						starbase = { remove_MT_disruption_aura = yes }
					}
				}
			}
		}
		else = { # if no new owner, always remove the thorns field (just a failsafe, systems with no onwer shouldn't have a starbase)
			FROM = {
				if = {
					limit = { exists = starbase }
					starbase = {
						remove_MT_disruption_aura = yes
					}
				}
			}
		}
	}
}

# Liberty bombardment stance creates ethics attractions | Fired by on_planet_bombarded
# This = Planet
# From = Bombarder
planet_event = {
	id = MT_events.84
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				has_agenda_selected = agenda_MT_liberation
				has_modifier = agenda_MT_liberation_finish
			}
		}
		has_orbital_bombardment_stance = selective
		This.Owner = {
			is_gestalt = no
		}
	}

	immediate = {
		# Check if modifier is there, if it is, remove, then apply for each of your ethics
		# Set Modifiers
		if = {
			limit = {
				from = { is_egalitarian = yes }
			}
			if = {
				limit = {
					has_modifier = MT_egalitarian_propaganda
				}
				remove_modifier = MT_egalitarian_propaganda
			}
			add_modifier = {
				modifier = MT_egalitarian_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_authoritarian = yes }
			}
			if = {
				limit = {
					has_modifier = MT_authoritarian_propaganda
				}
				remove_modifier = MT_authoritarian_propaganda
			}
			add_modifier = {
				modifier = MT_authoritarian_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_xenophobe = yes }
			}
			if = {
				limit = {
					has_modifier = MT_xenophobe_propaganda
				}
				remove_modifier = MT_xenophobe_propaganda
			}
			add_modifier = {
				modifier = MT_xenophobe_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_xenophile = yes }
			}
			if = {
				limit = {
					has_modifier = MT_xenophile_propaganda
				}
				remove_modifier = MT_xenophile_propaganda
			}
			add_modifier = {
				modifier = MT_xenophile_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_militarist = yes }
			}
			if = {
				limit = {
					has_modifier = MT_militarist_propaganda
				}
				remove_modifier = MT_militarist_propaganda
			}
			add_modifier = {
				modifier = MT_militarist_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_pacifist = yes }
			}
			if = {
				limit = {
					has_modifier = MT_pacifist_propaganda
				}
				remove_modifier = MT_pacifist_propaganda
			}
			add_modifier = {
				modifier = MT_pacifist_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_spiritualist = yes }
			}
			if = {
				limit = {
					has_modifier = MT_spiritualist_propaganda
				}
				remove_modifier = MT_spiritualist_propaganda
			}
			add_modifier = {
				modifier = MT_spiritualist_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
		if = {
			limit = {
				from = { is_materialist = yes }
			}
			if = {
				limit = {
					has_modifier = MT_materialist_propaganda
				}
				remove_modifier = MT_materialist_propaganda
			}
			add_modifier = {
				modifier = MT_materialist_propaganda
				days = 30
				mult = from.value:scripted_modifier_mult|MODIFIER|MT_bombardment_ethic_mult|
			}
		}
	}
}

# If this somehow deletes the situation immediately because the last owner is still owner when the situation checks the abort trigger, then make it so it also applies flag = MT_situations_don't_decay for 1 day and add it to condition of abort trigger as an AND trigger that says AND = NOT has flag = MT_situations_don't_decay
# Create Situation (Transfered)
planet_event = {
	id = MT_events.85
	hide_window = yes
	is_triggered_only = yes
	inline_script = {
		script = situations/MT_tradition_situations
		SCOPE = from
	}
}

# Create Situation (Colonized)
planet_event = {
	id = MT_events.86
	hide_window = yes
	is_triggered_only = yes
	inline_script = {
		script = situations/MT_tradition_situations
		SCOPE = owner
	}
}

# Create Situation (Branch Office Opened)
planet_event = {
	id = MT_events.87
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			AND = {
				From = { has_tradition = tr_mt_exchange_franchising }
				NOT = {
					has_planet_flag = MT_situation_exchange_franchising_flag
				}
			}
		}
		NOT = {
			is_planet_class = pc_cosmogenesis_world
		}
	}
	
	immediate = {
		save_event_target_as = MT_target_planet
		if = {
			limit = {
				From = {
					has_tradition = tr_mt_exchange_franchising
					home_planet = {
						is_same_value = event_target:MT_target_planet
					}
				}
				NOT = {
					has_planet_flag = MT_situation_exchange_franchising_flag
				}
			}
			event_target:MT_situation_handler_country = {
				start_situation = {
					type = MT_situation_exchange_franchising
					target = event_target:MT_target_planet
				}
			}
		}
	}
}

# Situation Blank Event
situation_event = {
	id = MT_events.88
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		owner = {
			set_country_flag = MT_something_went_wrong
		}
	}
}

# Create Situation (Planet Class Changed)
planet_event = {
	id = MT_events.89
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		exists = owner
		Owner = { has_tradition = tr_mt_ruination_adopt }
		NOT = {
			is_planet_class = pc_cosmogenesis_world
		}
	}
	
	immediate = {
		save_event_target_as = MT_target_planet
		if = {
			limit = {
				Owner = {
					has_tradition = tr_mt_ruination_revelry_in_ruin
				}
				OR = {
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
				}
				NOT = {
					has_planet_flag = MT_situation_ruination_revelry_in_ruin_flag
				}
			}
			event_target:MT_situation_handler_country = {
				start_situation = {
					type = MT_situation_ruination_revelry_in_ruin
					target = event_target:MT_target_planet
				}
			}
		}
		if = {
			limit = {
				Owner = {
					has_tradition = tr_mt_ruination_couldrons_of_corrosion
				}
				OR = {
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
				}
				NOT = {
					has_planet_flag = MT_situation_ruination_couldrons_of_corrosion_flag
				}
			}
			event_target:MT_situation_handler_country = {
				start_situation = {
					type = MT_situation_ruination_couldrons_of_corrosion
					target = event_target:MT_target_planet
				}
			}
		}
		if = {
			limit = {
				Owner = {
					has_tradition = tr_mt_ruination_spiteful_reclamations
				}
				OR = {
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
				}
				NOT = {
					has_planet_flag = MT_situation_ruination_spiteful_reclamations_flag
				}
			}
			event_target:MT_situation_handler_country = {
				start_situation = {
					type = MT_situation_ruination_spiteful_reclamations
					target = event_target:MT_target_planet
				}
			}
		}
		if = {
			limit = {
				Owner = {
					has_tradition = tr_mt_ruination_cities_under_cities
				}
				OR = {
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
				}
				NOT = {
					has_planet_flag = MT_situation_ruination_cities_under_cities_flag
				}
			}
			event_target:MT_situation_handler_country = {
				start_situation = {
					type = MT_situation_ruination_cities_under_cities
					target = event_target:MT_target_planet
				}
			}
		}
	}
}

# Turn Ecumenopoli into relic worlds and normal worlds into tomb worlds
planet_event = {
	id = MT_events.90
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		planet_devastation >= 99
		has_orbital_bombardment_stance = MT_ruination
		habitable_planet = yes
		NOR = {
			is_planet_class = pc_nuked
			is_planet_class = pc_relic
		}
	}

	immediate = {
		if = {
			limit = {
				is_planet_class = pc_city
			}
			owner = {
				if = {
					limit = {
						owner = {
							is_at_war_with = from
						}
					}
					add_static_war_exhaustion = {
						attacker = from
						location = root
						value_for_planet_destruction = 1
					}
				}
				country_event = { id = MT_events.91 }
			}
			from = { country_event = { id = MT_events.92 } }
			change_pc = pc_relic
			reroll_deposits = yes
			if = {
				limit = {
					owner = {
						AND = {
							has_origin = origin_progenitor_hive
							root = { is_capital = yes }
							root = { NOT = { has_deposit = d_progenitor } }
						}
					}
				}
				add_deposit = d_progenitor
			}
		}
		else = {
			owner = {
				if = {
					limit = {
						owner = {
							is_at_war_with = from
						}
					}
					add_static_war_exhaustion = {
						attacker = from
						location = root
						value_for_planet_destruction = 0.5
					}
				}
				country_event = { id = MT_events.91 }
			}
			from = { country_event = { id = MT_events.92 } }
			change_pc = pc_nuked
			set_planet_flag = nuked_planet_anomalies_disabled
			reroll_deposits = yes
			tomb_world_modifier_cleanup = yes
			if = {
				limit = {
					owner = {
						AND = {
							has_origin = origin_progenitor_hive
							root = { is_capital = yes }
							root = { NOT = { has_deposit = d_progenitor } }
						}
					}
				}
				add_deposit = d_progenitor
			}
		}
	}
}

# Planet is turned into tomb world by Armageddon bombing stance (former owner)
country_event = {
	id = MT_events.91
	title = "MT_events.91.name"
	picture = GFX_evt_nuclear_explosion
	desc = MT_events.91.desc
	show_sound = event_super_explosion
	location = from

	is_triggered_only = yes

	option = {
		name = MT_events.91.a
		if = {
			limit = {
				from.root = {
					is_planet_class = pc_nuked
				}
			}
			custom_tooltip = MT_bombed_to_tomb_world
		}
		else_if = {
			limit = {
				from.root = {
					is_planet_class = pc_relic
				}
			}
			custom_tooltip = MT_bombed_to_relic_world
		}
	}
}

# Planet is turned into tomb world by Armageddon bombing stance (bombarder)
country_event = {
	id = MT_events.92
	title = "MT_events.91.name"
	picture = GFX_evt_nuclear_explosion
	desc = MT_events.92.desc
	show_sound = event_super_explosion
	location = from

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_ascension_perk = ap_become_the_crisis
			}
			complete_crisis_objective = crisobj_destroy_worlds
		}
	}

	option = {
		name = EXCELLENT
		if = {
			limit = {
				from.root = {
					is_planet_class = pc_nuked
				}
			}
			custom_tooltip = MT_bombed_to_tomb_world
		}
		else_if = {
			limit = {
				from.root = {
					is_planet_class = pc_relic
				}
			}
			custom_tooltip = MT_bombed_to_relic_world
		}
	}
}

country_event = {
	id = MT_events.93
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_entrap_adaptive_economy
	}

	immediate = {
		if = {
			limit = {
				count_war = {
					count = 1
					limit = { always = yes }
				}
			}
			set_variable = { which = MT_current_war_start value = trigger:years_passed }
		}
	}
}

# Add landfill blocker
planet_event = {
	id = MT_events.94
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			has_tradition = tr_mt_greed_landfills
		}
		From = {
			NOT = {
				is_deposit_type = d_MT_landfill_blocker
			}
		}
	}

	immediate = {
		add_deposit = d_MT_landfill_blocker
	}
}

# Add Conquest Modifier
planet_event = {
	id = MT_events.95
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			has_tradition = tr_mt_conquest_finish
		}
	}

	immediate = {
		add_modifier = {
			modifier = MT_conquest_finish_modifier
			days = 3600
		}
	}
}

# Monthly situation for lathe checks
# Each month, if (trigger: has_built_lathe_flag and has lathe planet immidiate: if has any of the traditions that provide jobs per pop on planets, if NOT any_targeting_situation = { <triggers> (same situation as the one given by this event)} make situation handler, then start jo-suppressing situation.

country_event = {
	id = MT_events.96
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		#has_hydras_more_traditions_active = no # For copying to Expanded Stellaris Traditions
		has_country_flag = cosmogenesis_world_built
		any_owned_planet = {
			is_planet_class = pc_cosmogenesis_world
		}
		OR = {
			#has_tradition = tr_mt_maritime_merchant_navy
			has_tradition = tr_mt_urban_oversight
		}
	}

	immediate = {
		random_owned_planet = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			if = {
				limit = {
					NOT = {
						any_targeting_situation = {
							is_situation_type = MT_situation_lathe_job_suppression
						}
					}
				}
				save_event_target_as = MT_target_planet
				event_target:MT_situation_handler_country = {
					start_situation = {
						type = MT_situation_lathe_job_suppression
						target = event_target:MT_target_planet
					}
				}
			}
		}
	}
}

country_event = { # Extra traits for external leaders
	id = MT_events.97
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = spawning_renowned_leader }
		any_playable_country = {
			NOT = { is_same_value = prev }
			any_pool_leader = {
				is_same_value = prevprev.from
			}
			has_active_tradition = tr_mt_cosmopolitan_galactic_citizenship
		}
	}

	immediate = {
		FROM = {
			add_trait_no_notify = "random_common"
		}
	}
}

country_event = {
	id = MT_events.98
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_freedom_price
		fromfrom = {
			AND = {
				is_war_participant = { who = root side = attackers }
				OR = {
					using_war_goal = { type = wg_independence owner = attacker }
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				from = {
					NOT = {
						any_situation = {
							is_situation_type = MT_situation_freedom_tax
							target = {
								is_same_empire = root
							}
						}
					}
				}
			}
			from = {
				start_situation = {
					type = MT_situation_freedom_tax
					target = ROOT
					effect = {
						save_event_target_as = MT_taxpayer_situation
						set_situation_flag = MT_freedom_tax_payer
					}
				}
			}
			start_situation = {
				type = MT_situation_freedom_tax
				target = from
				effect = {
					save_event_target_as = MT_taxreciver_situation
					set_situation_flag = MT_freedom_tax_reciever
				}
			}
			event_target:MT_taxpayer_situation = {
				set_situation_approach = approach_MT_repay_the_debt
			}
			event_target:MT_taxreciever_situation = {
				set_situation_approach = approach_MT_repay_the_debt
			}
		}
		# Reset progress if you already have a situation
		else = {
			from = {
				random_situation = {
					limit = {
						is_situation_type = MT_situation_freedom_tax
						target = {
							is_same_empire = root
						}
					}
					add_situation_progress = value:MT_negative_current_progress
				}
			}
			random_situation = {
				limit = {
					is_situation_type = MT_situation_freedom_tax
					target = {
						is_same_empire = root.from
					}
				}
				add_situation_progress = value:MT_negative_current_progress
			}
		}
	}
}

# 99 = Tax Repaid

situation_event = {
	id = MT_events.99
	title = MT_events.99.name
	#desc = MT_events.99.desc # Change to triggered based on being taxpayer or tax reciever
	
	desc = {
		trigger = { has_situation_flag = MT_freedom_tax_payer }
		text = MT_events.99.desc.taxpayer
	}
	desc = {
		trigger = { has_situation_flag = MT_freedom_tax_reciever }
		text = MT_events.99.desc.taxreciever
	}
	
	picture = GFX_evt_bribery
	
	is_triggered_only = yes

	option = {
		name = MT_events.99.a.taxreciever
		trigger = { has_situation_flag = MT_freedom_tax_reciever }
	}
	
	option = {
		name = MT_events.99.a.taxpayer
		trigger = { has_situation_flag = MT_freedom_tax_payer }
	}
	
	option = {
		name = OK
		trigger = {
			NOR = {
				has_situation_flag = MT_freedom_tax_reciever
				has_situation_flag = MT_freedom_tax_payer
			}
		}
	}
	
	after = {
		destroy_situation = this
	}
}

# destroy_situation = this

# 100 = Tax Forgiven
# 101 = Tax Reciever Destroyed

situation_event = {
	id = MT_events.101
	hide_window = yes
	#title = MT_events.101.name
	#desc = MT_events.101.desc # Change to triggered based on being taxpayer or tax reciever
	
	#desc = {
	#	trigger = { has_situation_flag = MT_freedom_tax_payer }
	#	text = MT_events.101.desc.taxpayer
	#}
	#desc = {
	#	trigger = { has_situation_flag = MT_freedom_tax_reciever }
	#	text = MT_events.101.desc.taxreciever
	#}
	
	#picture = GFX_evt_bribery
	
	is_triggered_only = yes

	immediate = {
		create_message = {
			type = MESSAGE_TYPE_MT_CONTRACT_GONE
			localization =  MESSAGE_TYPE_MT_CONTRACT_GONE_DESC
			days = @toast_message_days
			target = owner.capital_scope
			#variable = {
			#	type = name
			#	localization = RELIC
			#	scope = this
			#}
		}
	}

	#option = {
	#	name = MT_events.101.a.taxreciever
	#	trigger = { has_situation_flag = MT_freedom_tax_reciever }
	#}
	#
	#option = {
	#	name = MT_events.101.a.taxpayer
	#	trigger = { has_situation_flag = MT_freedom_tax_payer }
	#}
	#
	#option = {
	#	name = OK
	#	trigger = {
	#		NOR = {
	#			has_situation_flag = MT_freedom_tax_reciever
	#			has_situation_flag = MT_freedom_tax_payer
	#		}
	#	}
	#}
	
	after = {
		destroy_situation = this
	}
}

# Lust Trait
#country_event = {
#	id = MT_events.98
#	
#	hide_window = yes
#	
#	is_triggered_only = yes
#
#	trigger = {
#		has_tradition = tr_mt_lust_fun_times
#	}
#
#	immediate = {
#		if = {
#			limit = { is_robotic_species = yes }
#			every_owned_pop = {
#				limit = {
#					is_same_species = root
#					species = {
#						NOT = { has_trait = trait_MT_lust_machine_trait }
#					}
#				}
#				modify_species = {
#					species = this
#					add_trait = trait_MT_lust_machine_trait
#				}
#				species = { save_event_target_as = main_species }
#			}
#		}
#		else = {
#			every_owned_pop = {
#				limit = {
#					is_same_species = root
#					species = {
#						NOT = { has_trait = trait_MT_lust_trait }
#					}
#				}
#				modify_species = {
#					species = this
#					add_trait = trait_MT_lust_trait
#				}
#				species = { save_event_target_as = main_species }
#			}
#		}
#		# Ensure the event target exists, since in rare cases the main species is already psionic and no pops get modified
#		# (Example: Teachers of the Shroud empires)
#		if = {
#			limit = {
#				exists = event_target:main_species
#			}
#			change_dominant_species = {
#				species = event_target:main_species
#				change_all = yes
#			}
#		}
#	}
#}

# On system gained.
country_event = {
	id = MT_events.102
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_tradition = tr_mt_desperation_emergency_waivers
			}
			FROM = {
				if = {
					limit = { exists = starbase }
					starbase = { add_MT_desperation_aura = yes }
				}
			}
		}
	}
}

# On system lost.
country_event = {
	id = MT_events.103
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { # checks if a new owner exists
			limit = { exists = FROMFROM }
			if = {
				limit = {
					has_tradition = tr_mt_desperation_emergency_waivers
					FROMFROM = {
						NOT = {
							has_tradition = tr_mt_desperation_emergency_waivers
						}
					}
				}
				FROM = {
					if = {
						limit = { exists = starbase }
						starbase = { remove_MT_desperation_aura = yes }
					}
				}
			}
		}
		else = { # if no new owner, always remove the thorns field (just a failsafe, systems with no onwer shouldn't have a starbase)
			FROM = {
				if = {
					limit = { exists = starbase }
					starbase = {
						remove_MT_desperation_aura = yes
					}
				}
			}
		}
	}
}

# On destroying enemy ship.
country_event = {
	id = MT_events.104
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_tradition = tr_mt_desperation_finish
		FROM = {
			OR = {
				is_country_type = swarm
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = ai_empire
				is_country_type = gray
				is_country_type = awakened_marauders
				is_country_type = synth_queen
				is_country_type = synth_queen_storm
				is_country_type = awakened_synth_queen
				is_country_type = synth_queen_convoys
				is_country_type = synth_queen_outposts
				has_ascension_perk = ap_become_the_crisis
				has_ascension_perk = ap_cosmogenesis
			}
		}
	}

	immediate = {
		add_resource = {
			unity = 10
		}
	}
}

###################
# Azurians Events #
###################

# Genesis // Adoption // move deposit on_capital_changed 
planet_event = {
    id = MT_events.1000
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        owner = {
            has_tradition = tr_mt_genesis_adopt
            NOT = {
                has_tradition = tr_mt_genesis_finish
            }
        }
    }
    immediate = {
        add_deposit = "d_MT_genesis_capital_boost_1"
		last_added_deposit = {
			set_deposit_flag = keep_deposit_on_terraform
		}
        from = {
            remove_deposit = "d_MT_genesis_capital_boost_1"
        }
    }
}

# Genesis // Finisher // move deposit on_capital_changed
planet_event = {
    id = MT_events.1001
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        owner = {
            has_tradition = tr_mt_genesis_finish
        }
    }
    immediate = {
        add_deposit = "d_MT_genesis_capital_boost_2"
		last_added_deposit = {
			set_deposit_flag = keep_deposit_on_terraform
		}
        from = {
            remove_deposit = "d_MT_genesis_capital_boost_2"
        }
    }
}

# Genesis // Generation Zero // add planetary modifier on_colonized
planet_event = {
    id = MT_events.1002
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        owner = {
            has_tradition = tr_mt_genesis_2
        }  
    }
    immediate = {
        add_modifier = {
            modifier = mt_pm_genesis_gen_colonization
            days = 7200
        }
    }
}

# Genesis // Paradigm Shift // add country modifier on_ascension_perk_picked
country_event = {
    id = MT_events.1003
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        has_tradition = tr_mt_genesis_4
    }
    immediate = {
        add_modifier = {
            modifier = mt_mod_genesis_paradigm_boost
            days = 1800
        }
    }
}

# Genesis // Cradle of Civilizations // add 50 sci x years on_colonization_started
planet_event = {
    id = MT_events.1004
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        planet_owner = {
            has_tradition = tr_mt_genesis_3
        }
    }
    immediate = {
        planet_owner = {
            add_resource = {
                engineering_research = 50
                society_research = 50
                physics_research = 50
                mult = trigger:years_passed
            }
        }
    }
}

# Geology // Crystalline Infection (purifier swap for geode clinic) // add 5-100 minerals on_pop_purged
planet_event = { #original borrowed event utopia.181
	id = MT_events.1005
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROM = {
			has_tradition = tr_mt_geology_5
			OR = {
				has_civic = civic_fanatic_purifiers
				has_civic = civic_hive_devouring_swarm
				has_civic = civic_machine_terminator
			}
		}
		exists = fromfrom #crisis.202 can remove the last pop         whatever that means
		FROMFROM = {
			is_robot_pop = no
			NOT = {
				is_same_species = owner_species
			}
		}
		is_controlled_by = FROM
	}

	immediate = {
		FROM = {
			add_monthly_resource_mult = {
				resource = rare_crystals
				value = 1
				min = 5
				max = 100
			}
		}
	}
}